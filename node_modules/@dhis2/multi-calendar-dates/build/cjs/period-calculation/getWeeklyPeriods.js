"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWeeklyPeriods = void 0;
var _polyfill = require("@js-temporal/polyfill");
var _helpers = require("../utils/helpers");
const Days = {
  Monday: 1,
  Tuesday: 2,
  Wednesday: 3,
  Thursday: 4,
  Friday: 5,
  Saturday: 6,
  Sunday: 7
};
const getStartingDay = (periodType, startingDay) => {
  switch (periodType) {
    case 'WEEKLY':
    case 'BIWEEKLY':
      return startingDay || Days.Monday;
    case 'WEEKLYSAT':
      return Days.Saturday;
    case 'WEEKLYSUN':
      return Days.Sunday;
    case 'WEEKLYTHU':
      return Days.Thursday;
    case 'WEEKLYWED':
      return Days.Wednesday;
    default:
      throw new Error(`unrecoginsed weekly period type: ${periodType}`);
  }
};
const getWeeklyPeriods = _ref => {
  let {
    year,
    calendar,
    periodType,
    startingDay,
    locale = 'en-GB'
  } = _ref;
  const startingDayToUse = getStartingDay(periodType, startingDay);
  let date = getStartingDate({
    year,
    calendar,
    periodType,
    startingDay: startingDayToUse
  });
  const days = [];
  let i = 1;
  const daysToAdd = periodType === 'BIWEEKLY' ? 13 : 6;
  do {
    const endofWeek = date.add({
      days: daysToAdd
    });
    const value = buildValue({
      periodType,
      startingDay: startingDayToUse,
      year,
      weekIndex: i
    });
    if (!(endofWeek.year === year + 1 && endofWeek.day >= 4)) {
      days.push({
        id: value,
        iso: value,
        name: buildLabel({
          periodType,
          date,
          nextWeek: endofWeek,
          weekIndex: i
        }),
        startDate: (0, _helpers.formatYyyyMmDD)(date),
        endDate: (0, _helpers.formatYyyyMmDD)(endofWeek)
      });
    }
    date = _polyfill.Temporal.PlainDate.from(endofWeek).add({
      days: 1
    });
    i++;
  } while (date.year === year); // important to have the condition after since the very first day can be in the previous year
  return days;
};
exports.getWeeklyPeriods = getWeeklyPeriods;
const getStartingDate = options => {
  const {
    year,
    calendar,
    startingDay
  } = options;

  // first week in every year has the 4th in the first month
  const fourthOfFirstMonth = _polyfill.Temporal.PlainDate.from({
    year,
    month: 1,
    day: 4,
    calendar
  });
  const dayDiff = fourthOfFirstMonth.dayOfWeek - startingDay;
  if (dayDiff > 0) {
    return fourthOfFirstMonth.subtract({
      days: dayDiff
    });
  } else if (dayDiff < 0) {
    return fourthOfFirstMonth.subtract({
      days: dayDiff + 7
    });
  }
  return fourthOfFirstMonth;
};
const DaysKeys = {
  1: '',
  // Monday is the default and has no key
  2: 'Tue',
  3: 'Wed',
  4: 'Thu',
  5: 'Fri',
  6: 'Sat',
  7: 'Sun'
};
const buildValue = _ref2 => {
  let {
    startingDay,
    periodType,
    year,
    weekIndex
  } = _ref2;
  const periodKey = periodType === 'BIWEEKLY' ? 'BiW' : 'W';
  return `${year}${DaysKeys[startingDay]}${periodKey}${weekIndex}`;
};
const buildLabel = _ref3 => {
  let {
    periodType,
    date,
    nextWeek,
    weekIndex
  } = _ref3;
  const {
    year,
    month,
    day
  } = date;
  const {
    year: nextYear,
    month: nextMonth,
    day: nextDay
  } = nextWeek;
  const prefix = periodType == 'BIWEEKLY' ? 'Bi-Week' : 'Week';
  const label = `${prefix} ${weekIndex} - ${year}-${(0, _helpers.padWithZeroes)(month)}-${(0, _helpers.padWithZeroes)(day)} - ${nextYear}-${(0, _helpers.padWithZeroes)(nextMonth)}-${(0, _helpers.padWithZeroes)(nextDay)}`;
  return label;
};