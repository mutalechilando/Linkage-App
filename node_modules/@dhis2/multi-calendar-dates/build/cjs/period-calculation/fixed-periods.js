"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _dhis2CalendarsMap = require("../constants/dhis2CalendarsMap");
var _getValidLocale = _interopRequireDefault(require("../utils/getValidLocale"));
var _helpers = require("../utils/helpers");
var _getDailyPeriods = require("./getDailyPeriods");
var _getMonthlyPeriods = require("./getMonthlyPeriods");
var _getWeeklyPeriods = require("./getWeeklyPeriods");
var _getYearlyPeriods = require("./getYearlyPeriods");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const periodIdentifiers = ['DAILY', 'WEEKLY', 'WEEKLYWED', 'WEEKLYTHU', 'WEEKLYSAT', 'WEEKLYSUN', 'BIWEEKLY', 'MONTHLY', 'BIMONTHLY', 'QUARTERLY', 'QUARTERLYNOV',
// used in Ethiopia
'SIXMONTHLY', 'SIXMONTHLYAPR', 'SIXMONTHLYNOV',
// used in Ethiopia
'YEARLY', 'FYNOV', 'FYOCT', 'FYJUL', 'FYAPR'];
const generateFixedPeriods = _ref => {
  var _dhis2CalendarsMap$re;
  let {
    year: yearString,
    periodType,
    calendar: requestedCalendar,
    locale: requestedLocale = 'en',
    startingDay = 1
  } = _ref;
  let year;
  if (typeof yearString === 'number') {
    year = yearString;
  } else {
    if (!isNaN(yearString) && !isNaN(parseInt(yearString))) {
      year = parseInt(yearString);
    } else {
      throw new Error('year must be a number');
    }
  }
  const calendar = (0, _helpers.getCustomCalendarIfExists)((_dhis2CalendarsMap$re = _dhis2CalendarsMap.dhis2CalendarsMap[requestedCalendar]) !== null && _dhis2CalendarsMap$re !== void 0 ? _dhis2CalendarsMap$re : requestedCalendar);
  const locale = (0, _getValidLocale.default)(requestedLocale);
  if (periodType !== null && periodType !== void 0 && periodType.match('WEEKLY')) {
    return (0, _getWeeklyPeriods.getWeeklyPeriods)({
      year,
      periodType,
      locale,
      calendar,
      startingDay
    });
  }
  if (periodType !== null && periodType !== void 0 && periodType.startsWith('FY') || periodType === 'YEARLY') {
    // financial year
    return (0, _getYearlyPeriods.getYearlyPeriods)({
      year,
      periodType,
      locale,
      calendar
    });
  }
  if (periodType.match(/SIXMONTHLY/) || periodType.match(/QUARTERLY/)) {
    return (0, _getMonthlyPeriods.getMonthlyPeriods)({
      year,
      periodType,
      locale,
      calendar
    });
  }
  switch (periodType) {
    case 'MONTHLY':
    case 'BIMONTHLY':
    case 'QUARTERLY':
    case 'SIXMONTHLY':
    case 'SIXMONTHLYAPR':
      return (0, _getMonthlyPeriods.getMonthlyPeriods)({
        year,
        periodType,
        locale,
        calendar
      });
    case 'DAILY':
      return (0, _getDailyPeriods.getDailyPeriods)({
        year,
        periodType,
        locale,
        calendar
      });
    default:
      throw new Error(`can not generate period for unrecognised period type "${periodType}"`);
  }
};
var _default = generateFixedPeriods;
exports.default = _default;