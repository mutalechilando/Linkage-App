"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.padWithZeroes = exports.isCustomCalendar = exports.getCustomCalendarIfExists = exports.formatYyyyMmDD = exports.capitalize = void 0;
var _customCalendars2 = require("../custom-calendars");
const isCustomCalendar = calendar => !!_customCalendars2.customCalendars[calendar];
exports.isCustomCalendar = isCustomCalendar;
const padWithZeroes = function (number) {
  let count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  return String(number).padStart(count, '0');
};
exports.padWithZeroes = padWithZeroes;
const formatYyyyMmDD = (date, dayType) => {
  var _date$eraYear;
  const year = (_date$eraYear = date.eraYear) !== null && _date$eraYear !== void 0 ? _date$eraYear : date.year;
  const month = padWithZeroes(date.month);
  let day = date.day;
  if (dayType === 'endOfMonth') {
    day = date.daysInMonth;
  } else if (dayType === 'startOfMonth') {
    day = 1;
  }
  const dayString = padWithZeroes(day);
  return `${year}-${month}-${dayString}`;
};

// capitalize method taking into account locales that have different way of lower/upper case
// based on https://stackoverflow.com/a/53930826
exports.formatYyyyMmDD = formatYyyyMmDD;
const capitalize = function (_ref) {
  let [firstLetter = '', ...rest] = _ref;
  let locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en';
  return [firstLetter.toLocaleUpperCase(locale), ...rest].join('');
};
exports.capitalize = capitalize;
const getCustomCalendarIfExists = calendar => {
  var _customCalendars;
  const isCustom = isCustomCalendar(calendar);
  if (!isCustom) {
    return calendar;
  }
  const customCalendar = (_customCalendars = _customCalendars2.customCalendars[calendar]) === null || _customCalendars === void 0 ? void 0 : _customCalendars.calendar;
  if (!customCalendar) {
    throw new Error(`No implemenation found for custom calendar ${calendar}`);
  }
  return customCalendar;
};
exports.getCustomCalendarIfExists = getCustomCalendarIfExists;