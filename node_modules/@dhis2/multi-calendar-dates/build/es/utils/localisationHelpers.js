import { numberingSystems } from '../constants';
import { customCalendars } from '../custom-calendars';
import { isCustomCalendar } from './helpers';
const getCustomCalendarLocale = (calendar, locale) => {
  var _ref;
  const customCalendar = customCalendars[calendar];
  if (!customCalendar) {
    return undefined;
  }
  const customLocalisations = customCalendar.locales || {};
  const result = (_ref = locale && (customLocalisations === null || customLocalisations === void 0 ? void 0 : customLocalisations[locale])) !== null && _ref !== void 0 ? _ref : customLocalisations === null || customLocalisations === void 0 ? void 0 : customLocalisations[customCalendar.defaultLocale];
  if (!result) {
    throw new Error(`no localisation found for custom calendar ${calendar}. Requested locale: ${locale}, Default locale ${customCalendar.defaultLocale}`);
  }
  return result;
};
const localiseDateLabel = (selectedDateZdt, localeOptions) => {
  if (!localeOptions.calendar) {
    throw new Error('no calendar provided to localise function');
  }
  if (!selectedDateZdt) {
    throw new Error('a date must be provided to localiseDateLabel');
  }
  const isCustom = isCustomCalendar(localeOptions.calendar);
  return isCustom ? `${selectedDateZdt === null || selectedDateZdt === void 0 ? void 0 : selectedDateZdt.day}-${selectedDateZdt === null || selectedDateZdt === void 0 ? void 0 : selectedDateZdt.month}-${selectedDateZdt === null || selectedDateZdt === void 0 ? void 0 : selectedDateZdt.year}` : selectedDateZdt === null || selectedDateZdt === void 0 ? void 0 : selectedDateZdt.toPlainDate().toLocaleString(localeOptions.locale, {
    calendar: localeOptions.calendar,
    dateStyle: 'full'
  }).toString();
};
const localiseWeekLabel = (zdt, localeOptions) => {
  var _customLocale$numbers;
  if (!localeOptions.calendar) {
    throw new Error('no calendar provided to localise function');
  }
  const isCustom = isCustomCalendar(localeOptions.calendar);
  const customLocale = getCustomCalendarLocale(localeOptions.calendar, localeOptions.locale);
  return isCustom ? (customLocale === null || customLocale === void 0 ? void 0 : (_customLocale$numbers = customLocale.numbers) === null || _customLocale$numbers === void 0 ? void 0 : _customLocale$numbers[zdt.day]) || zdt.day : zdt.toPlainDate().toLocaleString(localeOptions.locale, {
    calendar: localeOptions.calendar,
    numberingSystem: numberingSystems.includes(localeOptions.numberingSystem) ? localeOptions.numberingSystem : undefined,
    day: 'numeric'
  });
};
const localiseMonth = (zdt, localeOptions, format) => {
  if (!localeOptions.calendar) {
    throw new Error('no calendar provided to localise function');
  }
  const isCustom = isCustomCalendar(localeOptions.calendar);
  const customLocale = getCustomCalendarLocale(localeOptions.calendar, localeOptions.locale);
  return isCustom ? customLocale === null || customLocale === void 0 ? void 0 : customLocale.monthNames[zdt.month - 1] : zdt.toLocaleString(localeOptions.locale, format);
};
export const localiseWeekDayLabel = (zdt, localeOptions) => {
  if (!localeOptions.calendar) {
    throw new Error('no calendar provided to localise function');
  }
  const isCustom = isCustomCalendar(localeOptions.calendar);
  const customCalendar = getCustomCalendarLocale(localeOptions.calendar, localeOptions.locale);
  const customDayString = customCalendar === null || customCalendar === void 0 ? void 0 : customCalendar.dayNamesShort[zdt.dayOfWeek - 1]; // dayOfWeek is 1-based

  return isCustom && customDayString ? customDayString : zdt.toPlainDate().toLocaleString(localeOptions.locale, {
    weekday: localeOptions.weekDayFormat,
    calendar: localeOptions.calendar
  });
};
export const localiseYear = (zdt, localeOptions, format) => {
  if (!localeOptions.calendar) {
    throw new Error('no calendar provided to localise function');
  }
  const isCustom = isCustomCalendar(localeOptions.calendar);
  return isCustom ? zdt.year : zdt.toPlainYearMonth().toLocaleString(localeOptions.locale, format);
};
const localisationHelpers = {
  localiseYear,
  localiseDateLabel,
  localiseWeekLabel,
  localiseMonth,
  localiseWeekDayLabel
};
export default localisationHelpers;