import { dhis2CalendarsMap } from '../constants/dhis2CalendarsMap';
import getValidLocale from '../utils/getValidLocale';
import { getCustomCalendarIfExists } from '../utils/helpers';
import { getDailyPeriods } from './getDailyPeriods';
import { getMonthlyPeriods } from './getMonthlyPeriods';
import { getWeeklyPeriods } from './getWeeklyPeriods';
import { getYearlyPeriods } from './getYearlyPeriods';
const periodIdentifiers = ['DAILY', 'WEEKLY', 'WEEKLYWED', 'WEEKLYTHU', 'WEEKLYSAT', 'WEEKLYSUN', 'BIWEEKLY', 'MONTHLY', 'BIMONTHLY', 'QUARTERLY', 'QUARTERLYNOV',
// used in Ethiopia
'SIXMONTHLY', 'SIXMONTHLYAPR', 'SIXMONTHLYNOV',
// used in Ethiopia
'YEARLY', 'FYNOV', 'FYOCT', 'FYJUL', 'FYAPR'];
const generateFixedPeriods = _ref => {
  var _dhis2CalendarsMap$re;
  let {
    year: yearString,
    periodType,
    calendar: requestedCalendar,
    locale: requestedLocale = 'en',
    startingDay = 1
  } = _ref;
  let year;
  if (typeof yearString === 'number') {
    year = yearString;
  } else {
    if (!isNaN(yearString) && !isNaN(parseInt(yearString))) {
      year = parseInt(yearString);
    } else {
      throw new Error('year must be a number');
    }
  }
  const calendar = getCustomCalendarIfExists((_dhis2CalendarsMap$re = dhis2CalendarsMap[requestedCalendar]) !== null && _dhis2CalendarsMap$re !== void 0 ? _dhis2CalendarsMap$re : requestedCalendar);
  const locale = getValidLocale(requestedLocale);
  if (periodType !== null && periodType !== void 0 && periodType.match('WEEKLY')) {
    return getWeeklyPeriods({
      year,
      periodType,
      locale,
      calendar,
      startingDay
    });
  }
  if (periodType !== null && periodType !== void 0 && periodType.startsWith('FY') || periodType === 'YEARLY') {
    // financial year
    return getYearlyPeriods({
      year,
      periodType,
      locale,
      calendar
    });
  }
  if (periodType.match(/SIXMONTHLY/) || periodType.match(/QUARTERLY/)) {
    return getMonthlyPeriods({
      year,
      periodType,
      locale,
      calendar
    });
  }
  switch (periodType) {
    case 'MONTHLY':
    case 'BIMONTHLY':
    case 'QUARTERLY':
    case 'SIXMONTHLY':
    case 'SIXMONTHLYAPR':
      return getMonthlyPeriods({
        year,
        periodType,
        locale,
        calendar
      });
    case 'DAILY':
      return getDailyPeriods({
        year,
        periodType,
        locale,
        calendar
      });
    default:
      throw new Error(`can not generate period for unrecognised period type "${periodType}"`);
  }
};
export default generateFixedPeriods;