"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isUpdateInterpretation = exports.isReplyToMessageConversation = exports.isMetadataPackageInstallation = exports.isInterpretationCommentUpdate = exports.isExpressionDescriptionValidation = exports.isCreateInterpretation = exports.isCreateFeedbackMessage = exports.isCommentOnInterpretation = exports.isAddOrUpdateSystemOrUserSetting = exports.addOrUpdateConfigurationProperty = void 0;

/*
 * Requests that expect a "text/plain" Content-Type have been collected by scanning
 * the developer documentation:
 * https://docs.dhis2.org/master/en/developer/html/dhis2_developer_manual_full.html
 *
 * Note that currently it is not allowed to include an id property on a "create"
 * mutation object. This means that currently the `id` will always be included in
 * the resource property (string). If we decide to allow the `id` property for
 * "create" mutation-objects, we will have to include additional checks below.
 */
// POST to `messageConversations/${id}` (reply to a messagConversation)
const isReplyToMessageConversation = (type, _ref) => {
  let {
    resource
  } = _ref;
  const pattern = /^messageConversations\/[a-zA-Z0-9]{11}$/;
  return type === 'create' && pattern.test(resource);
}; // POST to 'messageConversations/feedback' (create a feedback message)


exports.isReplyToMessageConversation = isReplyToMessageConversation;

const isCreateFeedbackMessage = (type, _ref2) => {
  let {
    resource
  } = _ref2;
  return type === 'create' && resource === 'messageConversations/feedback';
}; // POST `interpretations/${objectType}/${id}` (add an interpretation to a visualization)


exports.isCreateFeedbackMessage = isCreateFeedbackMessage;

const isCreateInterpretation = (type, _ref3) => {
  let {
    resource
  } = _ref3;
  const pattern = /^interpretations\/(?:reportTable|chart|visualization|map|eventVisualization|eventReport|eventChart|dataSetReport)\/[a-zA-Z0-9]{11}$/;
  return type === 'create' && pattern.test(resource);
}; // PUT to `interpretations/${id}` (update an interpretation)


exports.isCreateInterpretation = isCreateInterpretation;

const isUpdateInterpretation = (type, _ref4) => {
  let {
    resource,
    id
  } = _ref4;

  if (type !== 'replace') {
    return false;
  }

  let resourcePattern;

  if (id) {
    resourcePattern = /^interpretations$/;
    const idPattern = /^[a-zA-Z0-9]{11}$/;
    return resourcePattern.test(resource) && idPattern.test(id);
  }

  resourcePattern = /^interpretations\/[a-zA-Z0-9]{11}$/;
  return resourcePattern.test(resource);
}; // POST to `interpretations/${id}/comments` (comment on an interpretation)


exports.isUpdateInterpretation = isUpdateInterpretation;

const isCommentOnInterpretation = (type, _ref5) => {
  let {
    resource
  } = _ref5;
  const pattern = /^interpretations\/[a-zA-Z0-9]{11}\/comments$/;
  return type === 'create' && pattern.test(resource);
}; // PUT to `interpretations/${interpretationId}/comments/${commentId}`
// (update an interpretation comment)


exports.isCommentOnInterpretation = isCommentOnInterpretation;

const isInterpretationCommentUpdate = (type, _ref6) => {
  let {
    resource,
    id
  } = _ref6;

  if (type !== 'replace') {
    return false;
  }

  if (id) {
    const idPatternLong = /^[a-zA-Z0-9]{11}\/comments\/[a-zA-Z0-9]{11}$/;
    const idPatternShort = /^[a-zA-Z0-9]{11}$/;
    const resourcePattern = /^interpretations\/[a-zA-Z0-9]{11}\/comments$/;
    return resource === 'interpretations' && idPatternLong.test(id) || resourcePattern.test(resource) && idPatternShort.test(id);
  }

  const pattern = /^interpretations\/[a-zA-Z0-9]{11}\/comments\/[a-zA-Z0-9]{11}$/;
  return pattern.test(resource);
}; // POST to `systemSettings/${settingKey}` or `userSettings/${settingKey}`
// (add or update a single system or user setting)


exports.isInterpretationCommentUpdate = isInterpretationCommentUpdate;

const isAddOrUpdateSystemOrUserSetting = (type, _ref7) => {
  let {
    resource
  } = _ref7;
  // At least 4 chars because the all start with 'key' (i.e. keyStyle)
  const pattern = /^(?:systemSettings|userSettings)\/[a-zA-Z]{4,}$/;
  return type === 'create' && pattern.test(resource);
}; // POST to `configuration/${configurationProperty}`
// (add or update a single configuration property)


exports.isAddOrUpdateSystemOrUserSetting = isAddOrUpdateSystemOrUserSetting;

const addOrUpdateConfigurationProperty = (type, _ref8) => {
  let {
    resource
  } = _ref8;
  // NOTE: The corsWhitelist property does expect "application/json"
  const pattern = /^(configuration)\/([a-zA-Z]{1,50})$/;
  const match = resource.match(pattern);
  return type === 'create' && !!match && match[2] !== 'corsWhitelist';
}; // POST to 'synchronization/metadataPull' (install a metadata package)


exports.addOrUpdateConfigurationProperty = addOrUpdateConfigurationProperty;

const isMetadataPackageInstallation = (type, _ref9) => {
  let {
    resource
  } = _ref9;
  return type === 'create' && resource === 'synchronization/metadataPull';
}; // POST to 'indicaators/expression/description' (validate an expression)


exports.isMetadataPackageInstallation = isMetadataPackageInstallation;

const isExpressionDescriptionValidation = (type, _ref10) => {
  let {
    resource
  } = _ref10;
  return type === 'create' && resource === 'indicators/expression/description';
};

exports.isExpressionDescriptionValidation = isExpressionDescriptionValidation;