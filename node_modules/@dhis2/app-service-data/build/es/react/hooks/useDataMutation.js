import { useCallback } from 'react';
import { useDataEngine } from './useDataEngine';
import { useQueryExecutor } from './useQueryExecutor';
import { useStaticInput } from './useStaticInput';
const empty = {};
export const useDataMutation = function (mutation) {
  let {
    onComplete,
    onError,
    variables = empty,
    lazy = true
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  const engine = useDataEngine();
  const [theMutation] = useStaticInput(mutation, {
    warn: true,
    name: 'mutation'
  });
  const execute = useCallback(options => engine.mutate(theMutation, options), [engine, theMutation]);
  const {
    refetch: mutate,
    called,
    loading,
    error,
    data
  } = useQueryExecutor({
    execute,
    variables,
    singular: false,
    immediate: !lazy,
    onComplete,
    onError
  });
  return [mutate, {
    engine,
    called,
    loading,
    error,
    data
  }];
};