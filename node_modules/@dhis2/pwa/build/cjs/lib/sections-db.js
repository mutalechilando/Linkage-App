"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SECTIONS_STORE = exports.SECTIONS_DB = void 0;
exports.deleteSectionsDB = deleteSectionsDB;
exports.openSectionsDB = openSectionsDB;

var _idb = require("idb");

const SECTIONS_DB = 'sections-db';
exports.SECTIONS_DB = SECTIONS_DB;
const SECTIONS_STORE = 'sections-store';
exports.SECTIONS_STORE = SECTIONS_STORE;
const DB_VERSION = 1;
/**
 * Opens indexed DB and object store for recorded sections. Should be used any
 * time the DB is accessed to make sure object stores are set up correctly and
 * avoid DB-access race condition on first installation.
 *
 * @returns {Promise} dbPromise. Usage: `const db = await dbPromise`
 */

function openSectionsDB() {
  return (0, _idb.openDB)(SECTIONS_DB, DB_VERSION, {
    upgrade(db, oldVersion
    /* newVersion, transaction */
    ) {
      // DB versioning trick that can iteratively apply upgrades
      // https://developers.google.com/web/ilt/pwa/working-with-indexeddb#using_database_versioning
      switch (oldVersion) {
        case 0:
          {
            db.createObjectStore(SECTIONS_STORE, {
              keyPath: 'sectionId'
            });
          }
        // falls through (this comment satisfies eslint)

        default:
          {
            console.debug('[sections-db] Done upgrading DB');
          }
      }
    }

  });
}
/** Deletes the DB */


function deleteSectionsDB() {
  return (0, _idb.deleteDB)(SECTIONS_DB);
}