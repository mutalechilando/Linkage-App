"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BASE_URL_STORE = exports.BASE_URL_DB = void 0;
exports.getBaseUrlByAppName = getBaseUrlByAppName;
exports.setBaseUrlByAppName = setBaseUrlByAppName;

var _idb = require("idb");

const BASE_URL_DB = 'dhis2-base-url-db';
exports.BASE_URL_DB = BASE_URL_DB;
const BASE_URL_STORE = 'dhis2-base-url-store';
exports.BASE_URL_STORE = BASE_URL_STORE;
const DB_VERSION = 1;
/**
 * Opens indexed DB and object store for baser urls by app name. Should be used any
 * time the DB is accessed to make sure object stores are set up correctly and
 * avoid DB-access race condition on first installation.
 *
 * @returns {Promise} dbPromise. Usage: `const db = await dbPromise`
 */

function openBaseUrlsDB() {
  return (0, _idb.openDB)(BASE_URL_DB, DB_VERSION, {
    upgrade(db, oldVersion
    /* newVersion, transaction */
    ) {
      // DB versioning trick that can iteratively apply upgrades
      // https://developers.google.com/web/ilt/pwa/working-with-indexeddb#using_database_versioning
      switch (oldVersion) {
        case 0:
          {
            db.createObjectStore(BASE_URL_STORE, {
              keyPath: 'appName'
            });
          }
        // falls through (this comment satisfies eslint)

        default:
          {
            console.debug('[sections-db] Done upgrading DB');
          }
      }
    }

  });
}
/** Deletes the DB (probably not needed) */
// function deleteBaseUrlsDB() {
//     return deleteDB(BASE_URL_DB)
// }


async function setBaseUrlByAppName(_ref) {
  let {
    appName,
    baseUrl
  } = _ref;
  const db = await openBaseUrlsDB();
  return db.put(BASE_URL_STORE, {
    appName,
    baseUrl
  });
}

async function getBaseUrlByAppName(appName) {
  const db = await openBaseUrlsDB();
  return db.get(BASE_URL_STORE, appName).then(entry => entry === null || entry === void 0 ? void 0 : entry.baseUrl);
}