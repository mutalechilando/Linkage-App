"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dhis2ConnectionStatusPlugin = exports.broadcastDhis2ConnectionStatus = void 0;
exports.initDhis2ConnectionStatus = initDhis2ConnectionStatus;

var _throttle = _interopRequireDefault(require("lodash/throttle"));

var _baseUrlDb = require("../lib/base-url-db.js");

var _constants = require("../lib/constants.js");

var _utils = require("./utils.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Tracks connection to the DHIS2 server based on fetch successes or failures.
 * Starts as null because it can't be determined until a request is sent
 */
function initDhis2ConnectionStatus() {
  // base url is only set as an env var in production.
  // in dev/standalone env, this may be undefined,
  // and the base URL can be accessed from IDB later.
  // note: if this SW is part of a global shell,
  // URL would need to be found on a per-client basis
  const dhis2BaseUrl = process.env.REACT_APP_DHIS2_BASE_URL;

  if (dhis2BaseUrl) {
    try {
      self.dhis2BaseUrl = new URL(dhis2BaseUrl).href;
    } catch {
      // the base URL is relative; construct an absolute one
      self.dhis2BaseUrl = new URL(dhis2BaseUrl, self.location.href).href;
    }
  }
} // Throttle this a bit to reduce SW/client messaging


const BROADCAST_INTERVAL_MS = 1000;
const broadcastDhis2ConnectionStatus = (0, _throttle.default)(async isConnected => {
  const clients = await (0, _utils.getAllClientsInScope)();
  clients.forEach(client => client.postMessage({
    type: _constants.swMsgs.dhis2ConnectionStatusUpdate,
    payload: {
      isConnected
    }
  }));
}, BROADCAST_INTERVAL_MS);
exports.broadcastDhis2ConnectionStatus = broadcastDhis2ConnectionStatus;

async function isRequestToDhis2Server(request) {
  // If dhis2BaseUrl isn't set, try getting it from IDB
  if (!self.dhis2BaseUrl) {
    const baseUrl = await (0, _baseUrlDb.getBaseUrlByAppName)(process.env.REACT_APP_DHIS2_APP_NAME);

    if (!baseUrl) {
      // No base URL is set; as a best effort, go ahead and update status
      // based on this request, even though it might not be to the DHIS2 server
      return true;
    } else {
      self.dhis2BaseUrl = baseUrl;
    }
  }

  return request.url.startsWith(self.dhis2BaseUrl);
}
/**
 * A plugin to hook into lifecycle events in workbox strategies
 * https://developer.chrome.com/docs/workbox/using-plugins/
 */


const dhis2ConnectionStatusPlugin = {
  fetchDidFail: async _ref => {
    let {
      request
    } = _ref;

    if (await isRequestToDhis2Server(request)) {
      broadcastDhis2ConnectionStatus(false);
    }
  },
  fetchDidSucceed: async _ref2 => {
    let {
      request,
      response
    } = _ref2;

    if (await isRequestToDhis2Server(request)) {
      broadcastDhis2ConnectionStatus(true);
    }

    return response;
  }
};
exports.dhis2ConnectionStatusPlugin = dhis2ConnectionStatusPlugin;