"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useVerifyLatestUser = useVerifyLatestUser;

var _appRuntime = require("@dhis2/app-runtime");

var _react = require("react");

const USER_QUERY = {
  user: {
    resource: 'me',
    params: {
      fields: ['id']
    }
  }
};
const LATEST_USER_KEY = 'dhis2.latestUser';
/**
 * This hook is used to clear sensitive caches if a user other than the one
 * that cached that data logs in
 * @returns {Object} - { loading: boolean }
 */

function useVerifyLatestUser() {
  const {
    pwaEnabled
  } = (0, _appRuntime.useConfig)();
  const [finished, setFinished] = (0, _react.useState)(false);
  const {
    loading,
    error
  } = (0, _appRuntime.useDataQuery)(USER_QUERY, {
    onComplete: async data => {
      const latestUserId = localStorage.getItem(LATEST_USER_KEY);
      const currentUserId = data.user.id;

      if (currentUserId !== latestUserId) {
        const cachesCleared = await (0, _appRuntime.clearSensitiveCaches)();
        localStorage.setItem(LATEST_USER_KEY, currentUserId);

        if (cachesCleared && pwaEnabled) {
          // If this is a PWA app, the app-shell cache will need to
          // be restored with a page reload
          return window.location.reload();
        }
      }

      setFinished(true);
    }
  });

  if (error) {
    throw new Error('Failed to fetch user ID: ' + error);
  }

  return {
    loading: loading || !finished
  };
}