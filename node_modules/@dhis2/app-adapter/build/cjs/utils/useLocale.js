"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLocale = exports.useCurrentUserLocale = void 0;

var _appRuntime = require("@dhis2/app-runtime");

var _d2I18n = _interopRequireDefault(require("@dhis2/d2-i18n"));

var _moment = _interopRequireDefault(require("moment"));

var _react = require("react");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

_d2I18n.default.setDefaultNamespace('default');

const simplifyLocale = locale => {
  const idx = locale.indexOf('-');

  if (idx === -1) {
    return locale;
  }

  return locale.substr(0, idx);
};

const setGlobalLocale = locale => {
  if (locale !== 'en' && locale !== 'en-us') {
    Promise.resolve(`moment/locale/${locale}`).then(s => _interopRequireWildcard(require(s))).catch(() => {
      /* ignore */
    });
  }

  _moment.default.locale(locale);

  const simplifiedLocale = simplifyLocale(locale);

  _d2I18n.default.changeLanguage(simplifiedLocale);
};

const useLocale = locale => {
  const [result, setResult] = (0, _react.useState)(undefined);
  (0, _react.useEffect)(() => {
    if (!locale) {
      return;
    }

    setGlobalLocale(locale);
    setResult(locale);
    console.log('ðŸ—º Global d2-i18n locale initialized:', locale);
  }, [locale]);
  return result;
};

exports.useLocale = useLocale;
const settingsQuery = {
  userSettings: {
    resource: 'userSettings'
  }
};

const useCurrentUserLocale = () => {
  const {
    loading,
    error,
    data
  } = (0, _appRuntime.useDataQuery)(settingsQuery);
  const locale = useLocale(data && (data.userSettings.keyUiLocale || window.navigator.language));

  if (error) {
    // This shouldn't happen, trigger the fatal error boundary
    throw new Error('Failed to fetch user locale: ' + error);
  }

  return {
    loading: loading || !locale,
    locale
  };
};

exports.useCurrentUserLocale = useCurrentUserLocale;