"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ErrorBoundary = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _d2I18n = _interopRequireDefault(require("@dhis2/d2-i18n"));

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _ButtonStyle = _interopRequireDefault(require("./styles/Button.style.js"));

var _ErrorBoundaryStyle = _interopRequireDefault(require("./styles/ErrorBoundary.style.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// In order to avoid using @dhis2/ui components in the error boundary - as anything
// that breaks within it will not be caught properly - we define a component
// with the same styles as Button
const UIButton = _ref => {
  let {
    children,
    onClick
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_style.default, {
    id: _ButtonStyle.default.__hash
  }, _ButtonStyle.default), /*#__PURE__*/_react.default.createElement("button", {
    onClick: onClick,
    className: `jsx-${_ButtonStyle.default.__hash}`
  }, children));
};

UIButton.propTypes = {
  children: _propTypes.default.node.isRequired,
  onClick: _propTypes.default.func.isRequired
};

const translatedErrorHeading = _d2I18n.default.t('An error occurred in the DHIS2 application.');

class ErrorBoundary extends _react.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "toggleTechInfoDrawer", () => {
      this.setState({
        drawerOpen: !this.state.drawerOpen
      });
    });

    _defineProperty(this, "handleCopyErrorDetails", () => {
      const errorDetails = this.errorDetailsRef.current.textContent;
      navigator.clipboard.writeText(errorDetails).then(() => {
        alert(_d2I18n.default.t('Technical details copied to clipboard'));
      });
    });

    this.state = {
      error: null,
      errorInfo: null,
      drawerOpen: false
    };
    this.errorDetailsRef = /*#__PURE__*/_react.default.createRef();
  }

  componentDidCatch(error, errorInfo) {
    this.setState({
      error,
      errorInfo
    });
  }

  render() {
    const {
      children,
      fullscreen,
      onRetry
    } = this.props;

    if (this.state.error) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: `jsx-${_ErrorBoundaryStyle.default.__hash}` + " " + ((0, _classnames.default)('mask', {
          fullscreen
        }) || "")
      }, /*#__PURE__*/_react.default.createElement(_style.default, {
        id: _ErrorBoundaryStyle.default.__hash
      }, _ErrorBoundaryStyle.default), /*#__PURE__*/_react.default.createElement("div", {
        className: `jsx-${_ErrorBoundaryStyle.default.__hash}` + " " + "container"
      }, /*#__PURE__*/_react.default.createElement("h1", {
        className: `jsx-${_ErrorBoundaryStyle.default.__hash}` + " " + "message"
      }, _d2I18n.default.t('Something went wrong')), onRetry && /*#__PURE__*/_react.default.createElement("div", {
        className: `jsx-${_ErrorBoundaryStyle.default.__hash}` + " " + "retry"
      }, /*#__PURE__*/_react.default.createElement(UIButton, {
        onClick: onRetry
      }, _d2I18n.default.t('Try again'))), /*#__PURE__*/_react.default.createElement("button", {
        onClick: this.toggleTechInfoDrawer,
        className: `jsx-${_ErrorBoundaryStyle.default.__hash}` + " " + "drawerToggle"
      }, this.state.drawerOpen ? _d2I18n.default.t('Hide technical details') : _d2I18n.default.t('Show technical details')), /*#__PURE__*/_react.default.createElement("div", {
        className: `jsx-${_ErrorBoundaryStyle.default.__hash}` + " " + ((0, _classnames.default)('drawer', {
          hidden: !this.state.drawerOpen
        }) || "")
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: `jsx-${_ErrorBoundaryStyle.default.__hash}` + " " + "errorIntro"
      }, /*#__PURE__*/_react.default.createElement("p", {
        className: `jsx-${_ErrorBoundaryStyle.default.__hash}`
      }, translatedErrorHeading), /*#__PURE__*/_react.default.createElement("p", {
        className: `jsx-${_ErrorBoundaryStyle.default.__hash}`
      }, _d2I18n.default.t('The following information may be requested by technical support.')), /*#__PURE__*/_react.default.createElement(UIButton, {
        onClick: this.handleCopyErrorDetails
      }, _d2I18n.default.t('Copy technical details to clipboard'))), /*#__PURE__*/_react.default.createElement("pre", {
        ref: this.errorDetailsRef,
        className: `jsx-${_ErrorBoundaryStyle.default.__hash}` + " " + "errorDetails"
      }, `${this.state.error}\n`, this.state.error.stack, this.state.errorInfo.componentStack))));
    }

    return children;
  }

}

exports.ErrorBoundary = ErrorBoundary;
ErrorBoundary.propTypes = {
  children: _propTypes.default.node.isRequired,
  fullscreen: _propTypes.default.bool,
  onRetry: _propTypes.default.func
};