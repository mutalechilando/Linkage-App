"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Alerts = void 0;
exports.mergeAlertStackAlerts = mergeAlertStackAlerts;

var _appRuntime = require("@dhis2/app-runtime");

var _ui = require("@dhis2/ui");

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/*
 * The alert-manager which populates the `useAlerts` hook from `@dhis2/app-service-alerts`
 * hook with alerts only supports simply adding and removing alerts. However, the
 * `AlertBar` from `@dhis2/ui` should leave the screen with a hide-animation, so this
 * requires an additional state. The `alertStackAlerts` state in the Alerts component
 * provides this addional state:
 *  - It contains all alerts from the alert-manager, with `options.hidden` set to `false`
 *  - And also alerts which have been removed from the alert-manager, but still have their
 *    leave animation in progress, whtih `options.hidden` set to `true`)
 * Alerts are removed from the `alertStackAlerts` state once the `onHidden` callback fires
 */
const Alerts = () => {
  const alertManagerAlerts = (0, _appRuntime.useAlerts)();
  const [alertStackAlerts, setAlertStackAlerts] = (0, _react.useState)(alertManagerAlerts);

  const removeAlertStackAlert = id => setAlertStackAlerts(alertStackAlerts.filter(alertStackAlert => alertStackAlert.id !== id));

  (0, _react.useEffect)(() => {
    if (alertManagerAlerts.length > 0) {
      setAlertStackAlerts(currentAlertStackAlerts => mergeAlertStackAlerts(currentAlertStackAlerts, alertManagerAlerts));
    }
  }, [alertManagerAlerts]);
  return /*#__PURE__*/_react.default.createElement(_ui.AlertStack, null, alertStackAlerts.map(_ref => {
    let {
      message,
      remove,
      id,
      options: {
        onHidden,
        ...props
      }
    } = _ref;
    return /*#__PURE__*/_react.default.createElement(_ui.AlertBar, _extends({}, props, {
      key: id,
      onHidden: () => {
        onHidden && onHidden();
        removeAlertStackAlert(id);

        if (alertManagerAlerts.some(a => a.id === id)) {
          remove();
        }
      }
    }), message);
  }));
};

exports.Alerts = Alerts;

function mergeAlertStackAlerts(alertStackAlerts, alertManagerAlerts) {
  return Object.values({
    /*
     * Assume that all alerts in the alertStackAlerts array are hiding.
     * After the object merge only the alerts not in the alertManagerAlerts
     * array will have `options.hidden === true`.
     */
    ...toIdBasedObjectWithHiddenOption(alertStackAlerts, true),

    /*
     * All alertManagerAlerts should be showing. This object merge will
     * overwrite any alertStackAlert by the alertManagerAlert with
     * the same `id`, thus ensuring the alert is visible.
     */
    ...toIdBasedObjectWithHiddenOption(alertManagerAlerts, false)
  });
}

function toIdBasedObjectWithHiddenOption(arr, hidden) {
  return arr.reduce((obj, item) => {
    obj[item.id] = { ...item,
      options: { ...item.options,
        hidden
      }
    };
    return obj;
  }, {});
}