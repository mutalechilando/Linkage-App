"use strict";

var _appRuntime = require("@dhis2/app-runtime");

var _appServiceAlerts = require("@dhis2/app-service-alerts");

var _react = require("@testing-library/react");

var _react2 = _interopRequireDefault(require("react"));

var _Alerts = require("../Alerts.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Alerts', () => {
  beforeEach(() => {
    jest.useFakeTimers();
  });

  const Wrapper = _ref => {
    let {
      children
    } = _ref;
    return /*#__PURE__*/_react2.default.createElement(_appServiceAlerts.AlertsProvider, null, children, /*#__PURE__*/_react2.default.createElement(_Alerts.Alerts, null));
  };

  const AlertButtons = _ref2 => {
    let {
      message,
      options
    } = _ref2;
    const {
      show,
      hide
    } = (0, _appRuntime.useAlert)(message, options);
    return /*#__PURE__*/_react2.default.createElement(_react2.default.Fragment, null, /*#__PURE__*/_react2.default.createElement("button", {
      className: "show",
      onClick: show
    }, "Show"), /*#__PURE__*/_react2.default.createElement("button", {
      className: "hide",
      onClick: hide
    }, "Hide"));
  };

  it('can show an alert', async () => {
    const msg = 'TEST ALERT';
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(Wrapper, null, /*#__PURE__*/_react2.default.createElement(AlertButtons, {
      message: msg
    })));
    (0, _react.act)(() => {
      _react.fireEvent.click(_react.screen.getByText('Show'));
    });
    await (0, _react.waitFor)(() => _react.screen.getByText(msg));
    expect(_react.screen.getAllByText(msg)).toHaveLength(1);
  });
  it('can hide an alert', async () => {
    const msg = 'TEST ALERT';
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(Wrapper, null, /*#__PURE__*/_react2.default.createElement(AlertButtons, {
      message: msg
    })));
    (0, _react.act)(() => {
      _react.fireEvent.click(_react.screen.getByText('Show'));
    });
    await (0, _react.waitFor)(() => _react.screen.getByText(msg));
    expect(_react.screen.getAllByText(msg)).toHaveLength(1);
    (0, _react.act)(() => {
      _react.fireEvent.click(_react.screen.getByText('Hide'));

      jest.runAllTimers();
    });
    expect(_react.screen.queryByText(msg)).toBeNull();
  });
  it('keeps the alert in the DOM while hiding', async () => {
    const msg = 'TEST ALERT';
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(Wrapper, null, /*#__PURE__*/_react2.default.createElement(AlertButtons, {
      message: msg
    })));
    (0, _react.act)(() => {
      _react.fireEvent.click(_react.screen.getByText('Show'));
    }); // It's there after show is called

    await (0, _react.waitFor)(() => _react.screen.getByText(msg));
    expect(_react.screen.getAllByText(msg)).toHaveLength(1);
    (0, _react.act)(() => {
      _react.fireEvent.click(_react.screen.getByText('Hide')); // Less than the animation duration


      jest.advanceTimersByTime(100);
    }); // Still there 100ms after hide is called

    expect(_react.screen.getAllByText(msg)).toHaveLength(1);
    (0, _react.act)(() => {
      jest.runAllTimers();
    }); // But eventually it is gone

    expect(_react.screen.queryByText(msg)).toBeNull();
  });
});
describe('mergeAlertStackAlerts', () => {
  it('add alerts from the alert manager and adds `hidden: false` to the options', () => {
    const alertStackAlerts = [];
    const alertManagerAlerts = [{
      id: 1,
      message: 'test1',
      options: {
        permanent: true
      }
    }, {
      id: 2,
      message: 'test2',
      options: {
        permanent: true
      }
    }];
    expect((0, _Alerts.mergeAlertStackAlerts)(alertStackAlerts, alertManagerAlerts)).toEqual([{
      id: 1,
      message: 'test1',
      options: {
        hidden: false,
        permanent: true
      }
    }, {
      id: 2,
      message: 'test2',
      options: {
        hidden: false,
        permanent: true
      }
    }]);
  });
  it('keeps alerts unchanged if the alert-manager and alert-stack contain equivalent items', () => {
    const alertStackAlerts = [{
      id: 1,
      message: 'test1',
      options: {
        permanent: true,
        hidden: false
      }
    }, {
      id: 2,
      message: 'test2',
      options: {
        permanent: true,
        hidden: false
      }
    }];
    const alertManagerAlerts = [{
      id: 1,
      message: 'test1',
      options: {
        permanent: true
      }
    }, {
      id: 2,
      message: 'test2',
      options: {
        permanent: true
      }
    }];
    expect((0, _Alerts.mergeAlertStackAlerts)(alertStackAlerts, alertManagerAlerts)).toEqual(alertStackAlerts);
  });
  it('keeps alerts in the alert-stack and sets `hidden` to `true` if they are no longer in the alert-manager', () => {
    const alertStackAlerts = [{
      id: 1,
      message: 'test1',
      options: {
        permanent: true,
        hidden: false
      }
    }, {
      id: 2,
      message: 'test2',
      options: {
        permanent: true,
        hidden: false
      }
    }];
    const alertManagerAlerts = [{
      id: 2,
      message: 'test2',
      options: {
        permanent: true
      }
    }];
    expect((0, _Alerts.mergeAlertStackAlerts)(alertStackAlerts, alertManagerAlerts)).toEqual([{
      id: 1,
      message: 'test1',
      options: {
        permanent: true,
        hidden: true
      }
    }, {
      id: 2,
      message: 'test2',
      options: {
        permanent: true,
        hidden: false
      }
    }]);
  });
  it('updates alerts in the alert-stack with the properties of the alerts in the alert-manager', () => {
    const alertStackAlerts = [{
      id: 1,
      message: 'test1',
      options: {
        permanent: true,
        hidden: false
      }
    }, {
      id: 2,
      message: 'test2',
      options: {
        permanent: true,
        hidden: false
      }
    }];
    const alertManagerAlerts = [{
      id: 1,
      message: 'test1 EDITED',
      options: {
        success: true
      }
    }, {
      id: 2,
      message: 'test2 EDITED',
      options: {
        success: true
      }
    }];
    expect((0, _Alerts.mergeAlertStackAlerts)(alertStackAlerts, alertManagerAlerts)).toEqual([{
      id: 1,
      message: 'test1 EDITED',
      options: {
        success: true,
        hidden: false
      }
    }, {
      id: 2,
      message: 'test2 EDITED',
      options: {
        success: true,
        hidden: false
      }
    }]);
  });
});