import { checkForSWUpdateAndReload } from '@dhis2/pwa';
import PropTypes from 'prop-types';
import React from 'react';
import { AppWrapper } from './components/AppWrapper.js';
import { ErrorBoundary } from './components/ErrorBoundary.js';
import { OfflineInterfaceProvider } from './components/OfflineInterfaceContext.js';
import { PWALoadingBoundary } from './components/PWALoadingBoundary.js';
import { ServerVersionProvider } from './components/ServerVersionProvider.js';

const AppAdapter = _ref => {
  let {
    appName,
    appVersion,
    url,
    apiVersion,
    pwaEnabled,
    plugin,
    children
  } = _ref;
  return /*#__PURE__*/React.createElement(ErrorBoundary, {
    fullscreen: true,
    onRetry: checkForSWUpdateAndReload
  }, /*#__PURE__*/React.createElement(OfflineInterfaceProvider, null, /*#__PURE__*/React.createElement(PWALoadingBoundary, null, /*#__PURE__*/React.createElement(ServerVersionProvider, {
    appName: appName,
    appVersion: appVersion,
    url: url,
    apiVersion: apiVersion,
    pwaEnabled: pwaEnabled
  }, /*#__PURE__*/React.createElement(AppWrapper, {
    plugin: plugin
  }, children)))));
};

AppAdapter.propTypes = {
  appName: PropTypes.string.isRequired,
  appVersion: PropTypes.string.isRequired,
  apiVersion: PropTypes.number,
  children: PropTypes.element,
  plugin: PropTypes.bool,
  pwaEnabled: PropTypes.bool,
  url: PropTypes.string
};
export default AppAdapter;