import _JSXStyle from "styled-jsx/style";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import i18n from '@dhis2/d2-i18n';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import buttonStyles from './styles/Button.style.js';
import styles from './styles/ErrorBoundary.style.js'; // In order to avoid using @dhis2/ui components in the error boundary - as anything
// that breaks within it will not be caught properly - we define a component
// with the same styles as Button

const UIButton = _ref => {
  let {
    children,
    onClick
  } = _ref;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: buttonStyles.__hash
  }, buttonStyles), /*#__PURE__*/React.createElement("button", {
    onClick: onClick,
    className: `jsx-${buttonStyles.__hash}`
  }, children));
};

UIButton.propTypes = {
  children: PropTypes.node.isRequired,
  onClick: PropTypes.func.isRequired
};
const translatedErrorHeading = i18n.t('An error occurred in the DHIS2 application.');
export class ErrorBoundary extends Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "toggleTechInfoDrawer", () => {
      this.setState({
        drawerOpen: !this.state.drawerOpen
      });
    });

    _defineProperty(this, "handleCopyErrorDetails", () => {
      const errorDetails = this.errorDetailsRef.current.textContent;
      navigator.clipboard.writeText(errorDetails).then(() => {
        alert(i18n.t('Technical details copied to clipboard'));
      });
    });

    this.state = {
      error: null,
      errorInfo: null,
      drawerOpen: false
    };
    this.errorDetailsRef = /*#__PURE__*/React.createRef();
  }

  componentDidCatch(error, errorInfo) {
    this.setState({
      error,
      errorInfo
    });
  }

  render() {
    const {
      children,
      fullscreen,
      onRetry
    } = this.props;

    if (this.state.error) {
      return /*#__PURE__*/React.createElement("div", {
        className: `jsx-${styles.__hash}` + " " + (cx('mask', {
          fullscreen
        }) || "")
      }, /*#__PURE__*/React.createElement(_JSXStyle, {
        id: styles.__hash
      }, styles), /*#__PURE__*/React.createElement("div", {
        className: `jsx-${styles.__hash}` + " " + "container"
      }, /*#__PURE__*/React.createElement("h1", {
        className: `jsx-${styles.__hash}` + " " + "message"
      }, i18n.t('Something went wrong')), onRetry && /*#__PURE__*/React.createElement("div", {
        className: `jsx-${styles.__hash}` + " " + "retry"
      }, /*#__PURE__*/React.createElement(UIButton, {
        onClick: onRetry
      }, i18n.t('Try again'))), /*#__PURE__*/React.createElement("button", {
        onClick: this.toggleTechInfoDrawer,
        className: `jsx-${styles.__hash}` + " " + "drawerToggle"
      }, this.state.drawerOpen ? i18n.t('Hide technical details') : i18n.t('Show technical details')), /*#__PURE__*/React.createElement("div", {
        className: `jsx-${styles.__hash}` + " " + (cx('drawer', {
          hidden: !this.state.drawerOpen
        }) || "")
      }, /*#__PURE__*/React.createElement("div", {
        className: `jsx-${styles.__hash}` + " " + "errorIntro"
      }, /*#__PURE__*/React.createElement("p", {
        className: `jsx-${styles.__hash}`
      }, translatedErrorHeading), /*#__PURE__*/React.createElement("p", {
        className: `jsx-${styles.__hash}`
      }, i18n.t('The following information may be requested by technical support.')), /*#__PURE__*/React.createElement(UIButton, {
        onClick: this.handleCopyErrorDetails
      }, i18n.t('Copy technical details to clipboard'))), /*#__PURE__*/React.createElement("pre", {
        ref: this.errorDetailsRef,
        className: `jsx-${styles.__hash}` + " " + "errorDetails"
      }, `${this.state.error}\n`, this.state.error.stack, this.state.errorInfo.componentStack))));
    }

    return children;
  }

}
ErrorBoundary.propTypes = {
  children: PropTypes.node.isRequired,
  fullscreen: PropTypes.bool,
  onRetry: PropTypes.func
};