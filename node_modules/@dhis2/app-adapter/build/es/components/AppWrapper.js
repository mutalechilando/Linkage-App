import _JSXStyle from "styled-jsx/style";
import PropTypes from 'prop-types';
import React from 'react';
import { useCurrentUserLocale } from '../utils/useLocale.js';
import { useVerifyLatestUser } from '../utils/useVerifyLatestUser.js';
import { Alerts } from './Alerts.js';
import { ConnectedHeaderBar } from './ConnectedHeaderBar.js';
import { ErrorBoundary } from './ErrorBoundary.js';
import { LoadingMask } from './LoadingMask.js';
import { styles } from './styles/AppWrapper.style.js';
export const AppWrapper = _ref => {
  let {
    children,
    plugin
  } = _ref;
  const {
    loading: localeLoading
  } = useCurrentUserLocale();
  const {
    loading: latestUserLoading
  } = useVerifyLatestUser();

  if (localeLoading || latestUserLoading) {
    return /*#__PURE__*/React.createElement(LoadingMask, null);
  }

  return /*#__PURE__*/React.createElement("div", {
    className: `jsx-${styles.__hash}` + " " + "app-shell-adapter"
  }, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: styles.__hash
  }, styles), !plugin && /*#__PURE__*/React.createElement(ConnectedHeaderBar, null), /*#__PURE__*/React.createElement("div", {
    className: `jsx-${styles.__hash}` + " " + "app-shell-app"
  }, /*#__PURE__*/React.createElement(ErrorBoundary, {
    onRetry: () => window.location.reload()
  }, children)), /*#__PURE__*/React.createElement(Alerts, null));
};
AppWrapper.propTypes = {
  children: PropTypes.node,
  plugin: PropTypes.bool
};