"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarProps = exports.Calendar = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _multiCalendarDates = require("@dhis2/multi-calendar-dates");

var _uiConstants = require("@dhis2/ui-constants");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _calendarTable = require("./calendar-table.js");

var _navigationContainer = require("./navigation-container.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Calendar = _ref => {
  let {
    onDateSelect,
    calendar,
    date,
    dir,
    locale,
    numberingSystem,
    weekDayFormat,
    timeZone,
    width,
    cellSize
  } = _ref;
  const wrapperBorderColor = _uiConstants.colors.grey300;
  const backgroundColor = 'none';
  const [selectedDateString, setSelectedDateString] = (0, _react.useState)(date);
  const languageDirection = (0, _multiCalendarDates.useResolvedDirection)(dir, locale);
  const options = {
    locale,
    calendar,
    timeZone,
    numberingSystem,
    weekDayFormat
  };
  const pickerOptions = (0, _multiCalendarDates.useDatePicker)({
    onDateSelect: result => {
      const {
        calendarDateString
      } = result;
      setSelectedDateString(calendarDateString);
      onDateSelect(result);
    },
    date: selectedDateString,
    options
  });
  const {
    calendarWeekDays,
    weekDayLabels
  } = pickerOptions;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: _style.default.dynamic([["2823859047", [backgroundColor, wrapperBorderColor, width]]])
  }, /*#__PURE__*/_react.default.createElement("div", {
    dir: languageDirection,
    "data-test": "calendar",
    className: _style.default.dynamic([["2823859047", [backgroundColor, wrapperBorderColor, width]]]) + " " + "calendar-wrapper"
  }, /*#__PURE__*/_react.default.createElement(_navigationContainer.NavigationContainer, {
    pickerOptions: pickerOptions,
    languageDirection: languageDirection
  }), /*#__PURE__*/_react.default.createElement(_calendarTable.CalendarTable, {
    selectedDate: selectedDateString,
    calendarWeekDays: calendarWeekDays,
    weekDayLabels: weekDayLabels,
    cellSize: cellSize,
    width: width
  })), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "2823859047",
    dynamic: [backgroundColor, wrapperBorderColor, width]
  }, [".calendar-wrapper.__jsx-style-dynamic-selector{font-family:Roboto,sans-serif;font-weight:400;font-size:14px;background-color:".concat(backgroundColor, ";display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;border:1px solid ").concat(wrapperBorderColor, ";border-radius:3px;min-width:").concat(width, ";width:-webkit-max-content;width:-moz-max-content;width:max-content;box-shadow:0px 4px 6px -2px #2129340d;box-shadow:0px 10px 15px -3px #2129341a;}")]));
};

exports.Calendar = Calendar;
Calendar.defaultProps = {
  cellSize: '32px',
  width: '240px',
  weekDayFormat: 'narrow'
};
const CalendarProps = {
  /** the calendar to use such gregory, ethiopic, nepali - full supported list here: https://github.com/dhis2/multi-calendar-dates/blob/main/src/constants/calendars.ts  */
  calendar: _propTypes.default.any.isRequired,

  /** Called with signature `(null)` \|\| `({ dateCalendarString: string, dateCalendar: Temporal.ZonedDateTime })` with `dateCalendarString` being the stringified date in the specified calendar in the format `yyyy-MM-dd` */
  onDateSelect: _propTypes.default.func.isRequired,

  /** the size of a single cell in the table forming the calendar */
  cellSize: _propTypes.default.string,

  /** the currently selected date using an iso-like format YYYY-MM-DD, in the calendar system provided (not iso8601) */
  date: _propTypes.default.string,

  /** the direction of the library - internally the library will use rtl for rtl-languages but this can be overridden here for more control */
  dir: _propTypes.default.oneOf(['ltr', 'rtl']),

  /** any valid locale -  if none provided, the internal library will fallback to the user locale (more info here: https://github.com/dhis2/multi-calendar-dates/blob/main/src/hooks/internal/useResolvedLocaleOptions.ts#L15) */
  locale: _propTypes.default.string,

  /** numbering system to use - full list here https://github.com/dhis2/multi-calendar-dates/blob/main/src/constants/numberingSystems.ts */
  numberingSystem: _propTypes.default.string,

  /** the timeZone to use */
  timeZone: _propTypes.default.string,

  /** the format to display for the week day, i.e. Monday (long), Mon (short), M (narrow) */
  weekDayFormat: _propTypes.default.oneOf(['narrow', 'short', 'long']),

  /** the width of the calendar component */
  width: _propTypes.default.string
};
exports.CalendarProps = CalendarProps;
Calendar.propTypes = CalendarProps;