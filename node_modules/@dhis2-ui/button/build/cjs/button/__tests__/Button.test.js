"use strict";

var _react = require("@testing-library/react");

var _enzyme = require("enzyme");

var _react2 = _interopRequireDefault(require("react"));

var _button = require("../button.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<Button>', () => {
  it('renders a default data-test attribute', () => {
    const dataTest = 'dhis2-uicore-button';
    const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react2.default.createElement(_button.Button, {
      dataTest: dataTest
    }));
    const actual = wrapper.find({
      'data-test': dataTest
    });
    expect(actual.length).toBe(1);
  });
  it('renders a custom data-test attribute', () => {
    const dataTest = 'button-data-test';
    const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react2.default.createElement(_button.Button, {
      dataTest: dataTest
    }));
    const actual = wrapper.find({
      'data-test': dataTest
    });
    expect(actual.length).toBe(1);
  });
  describe('toggle', () => {
    it('should have class "toggled" if toggled-prop is true', () => {
      const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react2.default.createElement(_button.Button, {
        toggled: true
      }));
      const actual = wrapper.find('button');
      expect(actual.hasClass('toggled')).toBe(true);
    });
    it('should not have class "toggled" if toggled-prop is not passed', () => {
      const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react2.default.createElement(_button.Button, null));
      const actual = wrapper.find('button');
      expect(actual.hasClass('toggled')).toBe(false);
    });
  });
  it('should call the onKeyDown callback when provided', () => {
    const onKeyDown = jest.fn();
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_button.Button, {
      name: "button-name",
      value: "button-value",
      onKeyDown: onKeyDown
    }, "btn"));

    _react.fireEvent.keyDown(_react.screen.getByRole('button'), {
      key: 'Enter',
      code: 'Enter',
      charCode: 13
    });

    expect(onKeyDown).toHaveBeenCalledWith({
      name: 'button-name',
      value: 'button-value'
    }, expect.objectContaining({}));
    expect(onKeyDown).toHaveBeenCalledTimes(1);
  });
});