"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHeaderBarContext = exports.HeaderBarContextProvider = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const headerBarContext = /*#__PURE__*/(0, _react.createContext)({
  updateAvailable: false,
  onApplyAvailableUpdate: () => {}
});

const HeaderBarContextProvider = _ref => {
  let {
    updateAvailable,
    onApplyAvailableUpdate,
    children
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(headerBarContext.Provider, {
    value: {
      updateAvailable,
      onApplyAvailableUpdate
    }
  }, children);
};

exports.HeaderBarContextProvider = HeaderBarContextProvider;
HeaderBarContextProvider.propTypes = {
  children: _propTypes.default.node,
  updateAvailable: _propTypes.default.bool,
  onApplyAvailableUpdate: _propTypes.default.func
};

const useHeaderBarContext = () => (0, _react.useContext)(headerBarContext);

exports.useHeaderBarContext = useHeaderBarContext;